
"""
Create this script as scripts/verify_startup.py to test the fix:
"""

import asyncio
import logging
import httpx
import os
from dotenv import load_dotenv

async def verify_mcp_setup():
    """Verify MCP server and client setup."""
    
    load_dotenv()
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(__name__)
    
    base_url = os.getenv("MCP_HTTP_URL", "http://localhost:8082")
    api_key = os.getenv("MCP_API_KEY")
    
    logger.info("Verifying MCP setup...")
    logger.info("Base URL: %s", base_url)
    logger.info("API Key: %s", api_key[:10] + "..." if api_key else "NOT SET")
    
    # Test 1: Server health check
    try:
        async with httpx.AsyncClient() as client:
            health_response = await client.get(f"{base_url}/health")
            logger.info("✅ Server health: %s", health_response.status_code)
            if health_response.status_code == 200:
                logger.info("Server info: %s", health_response.json())
    except Exception as e:
        logger.error("❌ Server health check failed: %s", e)
        return False
    
    # Test 2: MCP endpoint with correct headers
    try:
        from mcp_client.transport.http_transport import StandardHTTPTransport
        from mcp_client.client import StandardMCPClient
        from mcp_client.protocol.messages import InitializeRequest
        
        transport = StandardHTTPTransport(base_url, api_key)
        client = StandardMCPClient(transport)
        
        logger.info("Testing MCP client initialization...")
        result = await client.initialize()
        logger.info("✅ MCP client initialized successfully")
        logger.info("Server capabilities: %s", result.get("capabilities", {}))
        
        # Test 3: List tools
        tools = await client.list_tools()
        logger.info("✅ Listed %d tools", len(tools))
        for tool in tools:
            logger.info("  - %s: %s", tool.get("name"), tool.get("description"))
        
        await client.close()
        logger.info("✅ All tests passed!")
        return True
        
    except Exception as e:
        logger.error("❌ MCP client test failed: %s", e)
        return False

if __name__ == "__main__":
    success = asyncio.run(verify_mcp_setup())
    exit(0 if success else 1)